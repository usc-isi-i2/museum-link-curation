'''
Calcualtes Precision and recall values for linkage generated by HybridJaccard
Takes an input json file and gives output json

Input
{"similarity": {"score": 0.7042857142857143, "match": true}, "uri2": "http://vocab.getty.edu/ulan/500108546", "uri1": "http://data.americanartcollaborative.org/acm/artistobject/2357"}
{"similarity": {"score": 0.6869047619047619, "match": true}, "uri2": "http://vocab.getty.edu/ulan/500356472", "uri1": "http://data.americanartcollaborative.org/acm/artistobject/2357"}


Output
{"precision": 0.89, "recall": 0.41}	


Cases
   result             	Musuem Linkage
1) A -- B 				A -- B 				True Positive += 1
2) A -- B 				A -- C 				False Positive += 1
3) A -- B               None                True Negative += 1
4) None                 A -- B              False Negative += 1

Precison = TP / (TP + FP)
Recall = TP / (TP + FN)

'''

from SPARQLWrapper import SPARQLWrapper, JSON
import json, sys
SPARQL_ENDPOINT = "http://data.americanartcollaborative.org/sparql"

def calculate_relevance(ipfile):
	parent_uri_set = set()
	success_uri = set()
	ignored_uri = set()
	failure_uri = set()
	total_uri_set = set()
	sparql = SPARQLWrapper(SPARQL_ENDPOINT)
	sparql.setReturnFormat(JSON)
	query = ''
	with open('get_ulan_uri.sparql', 'r') as query_file:
		# get_ulan_uri.sparql has sparql query , need to replace PARENT_URI with actual URI
		query = query_file.read()

	with open(ipfile, 'r') as ip:
		for line in ip:
			data = json.loads(line)
			parent_uri = data["uri1"]
			ulan_uri = data["uri2"]
			similarity_score = float(data["similarity"]["score"])
			#print(similarity_score)
			#if parent_uri in parent_uri_set:
			#	continue
			#parent_uri_set.add(parent_uri)
			squery = query.replace('PARENT_URI', parent_uri)
			sparql.setQuery(squery)
			output = sparql.query().convert()
			print(parent_uri, output)
			if len(output['results']['bindings']) > 0:
				total_uri_set.add(parent_uri)
				bindings = set()
				for binding in output['results']['bindings']:
					bindings.add(binding['lod_identifier']['value'])

				if ulan_uri in bindings:
					success_uri.add(parent_uri)
				else:
					failure_uri.add(parent_uri)
			else:
				ignored_uri.add(parent_uri)
	precision = 0
	if len(total_uri_set) > 0:
		precision = float(len(success_uri)) / (len(total_uri_set))
	#print(len(success_uri), len(failure_uri), len(total_uri_set))
	result = {'precision': precision}
	print(json.dumps(result))

if __name__ == '__main__':
	#print(len(sys.argv))
	#assert(len(sys.argv) != 3), "Expects a json file as argument"
	calculate_relevance(sys.argv[1])